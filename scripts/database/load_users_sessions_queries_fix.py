import math
import csv

from argparse import ArgumentParser
from contextlib import closing
from os import path
from queryutils import get_user_sessions
from psycopg2 import connect

DATABASE = "lupe.db"
USER = PASSWORD = "lupe"


def main(filename="", directory=""):
    load_db(filename=filename, directory=directory)


def load_db(filename="", directory=""):
    db = connect(database=DATABASE, user=USER, password=PASSWORD)
    load_main(db, filename=filename, directory=directory)
    db.close()


def load_main(database, filename="", directory=""):
    user_id = 1
    session_id = 1
    query_id = 1
    for users in get_user_sessions(filename=filename, directory=directory):
        for user in users:
            print "Loaded user"
            insert_user(database, user_id, user.name, user.case)
            for (local_sid, session) in user.sessions.iteritems():
                insert_session(database, session_id, user_id)
                for query in session.queries:
                    insert_query(database, query_id, query.text, query.time,
                                 False, user_id, 
                                 query.searchtype, query.earliest_event, query.latest_event, query.range, 
                                 query.is_realtime, query.splunk_search_id, query.runtime, query.splunk_savedsearch_name, 
                                 session_id=session_id)
                    query_id += 1
                session_id += 1
            for query in user.autorecurring_queries:
                insert_query(database, query_id, query.text, query.time, True, user_id, 
                query.searchtype, query.earliest_event, query.latest_event, query.range, 
                query.is_realtime, query.splunk_search_id, query.runtime, query.splunk_savedsearch_name)
                query_id += 1
            user_id += 1


def insert_user(db, uid, username, company):
    cursor = db.cursor()
    cursor.execute("INSERT INTO users_fix (id, name, company) VALUES (%s,%s,%s)", [uid, username, company])
    db.commit()


def insert_session(db, sid, userid):
    cursor = db.cursor()
    cursor.execute(
        "INSERT INTO sessions_fix (id, user_id) VALUES (%s,%s)", [sid, userid])
    db.commit()


def insert_query(db, qid, text, time, autogenerated, user_id, 
                searchtype, earliest_event, latest_event, range,
                is_realtime, splunk_search_id, runtime, splunk_savedsearch_name,
                session_id=None):
    cursor = db.cursor()
    if session_id is not None:
        cursor.execute("INSERT INTO queries_fix \
                            (id, text, time, autogenerated, user_id, searchtype, earliest_event, latest_event, range, is_realtime, splunk_search_id, runtime, splunk_savedsearch_name, session_id) \
                            VALUES (%s,%s,%s,%s,%s,%s,%s,%s,%s,%s,%s,%s,%s,%s)",
                       [qid, text, time, autogenerated, user_id, searchtype, earliest_event, latest_event, range, is_realtime, splunk_search_id, runtime, splunk_savedsearch_name, session_id])
    else:
        cursor.execute("INSERT INTO queries_fix \
                            (id, text, time, autogenerated, user_id) \
                            VALUES (%s,%s,%s,%s,%s)",
                       [qid, text, time, autogenerated, user_id])
    db.commit()


if __name__ == "__main__":

    parser = ArgumentParser("Demonstrates how to extract sessions from SPL query logs using the queryutils module.")
    parser.add_argument("-f", "--filename", # TODO: Accept a list of filenames instead.
                        help="A query log containing SPL query data. Specify this OR directory.")
    parser.add_argument("-d", "--directory",
                        help="A directory containing SPL query logs. Specify this OR filename.")

    args = parser.parse_args()

    if args.filename:
        main(filename=args.filename)
    elif args.directory:
        main(directory=args.directory)
    else:
        parser.print_help()
